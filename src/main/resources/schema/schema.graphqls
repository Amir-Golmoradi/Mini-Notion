# Query type defines the entry points for fetching data in GraphQL.
type Query {
    findAllUsers(page: Int = 0, size: Int = 10): UserPage!
    findUserById(id: ID!): UserResponseDto
    findUserByEmail(email: String!): UserResponseDto
    findUserByName(name: String!): UserResponseDto
}

# Mutation type defines operations that MODIFY DATA in the GraphQL API.
type Mutation {
    createUser(input: UserRequestDto!): UserResponseDto!
    editUser(email: String!, input: UserRequestDto!): UserResponseDto!
    deleteUser(email: String!): Boolean!
}

# PageInfo type provides metadata for paginated results.
type PageInfo {
    totalElements: Int!
    totalPages: Int!
    pageNumber: Int!
    pageSize: Int!
}

# UserPage type wraps paginated results for findAllUsers query.
type UserPage {
    content: [UserResponseDto!]!
    pageInfo: PageInfo!
}

# Reusing your existing DTOs directly in GraphQL schema
input UserRequestDto {
    name: String!
    email: String!
    passwordHash: String!
}

type UserResponseDto {
    name: String!
    email: String!
}
